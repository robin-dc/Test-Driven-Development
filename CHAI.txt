CHAI LIBRARY DOCUMENTATION

Chains

- to
- be
- been
- is
- that
- which
- and
- has
- have
- with
- at
- of
- same
- but
- does
- still
- also

ALL OF THE CHAINS CAN HAVE .NOT
ex: 
expect([3,4]).to.not.include(2);
expect({c: 3}).to.not.have.any.keys('a', 'b');

.EQUAL
expect(v).to.equal(v);

.DEEP
expect({a: 1}).to.deep.equal({a: 1})			// object
expect([{a: 1}]).to.deep.include({a: 1});		// array
expect({x: {a: 1}}).to.deep.include({x: {a: 1}});	// object
expect([{a: 1}]).to.have.deep.members([{a: 1}]);	// array
expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);	// set
expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});	// object

.NESTED
expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});

.OWN / .HAVE
expect({a: 1}).to.have.own.property('a');
expect({a: 1}).to.have.property('b');
expect([1, 2, 3]).to.have.members([2, 1, 3]);

.ANY
expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');

.ALL
expect({a: 1, b: 2}).to.have.all.keys('a', 'b');

.INCLUDE
expect('foobar').to.include('foo');
expect([1, 2, 3]).to.include(2);
expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});
expect(new Set([1, 2])).to.include(2);
expect(new Map([['a', 1], ['b', 2]])).to.include(2);

.EXIST
expect(1).to.exist;

.EMPTY
expect([]).to.be.empty;
expect('').to.be.empty;
expect([]).to.be.an('array').that.is.empty;

.LENGTH OF
expect('foo').to.have.lengthOf(3);

.INSTANCEOF
expect(new Cat()).to.be.an.instanceof(Cat);
expect([1, 2]).to.be.an.instanceof(Array);

.THROW
expect(badFn).to.throw();
expect(badFn).to.throw(TypeError);
expect(goodFn).to.not.throw();

DETECT DATA TYPE
.A or .AN
expect('foo').to.be.a('string');
expect({a: 1}).to.be.an('object');

NESTED CHAINS
expect([1, 2, 3]).to.be.an('array').that.includes(2);
expect([]).to.be.an('array').that.is.empty;

TRUE OR FALSE
expect(true).to.be.true;
expect(false).to.be.false;

NULL OR UNDEFINED
expect(null).to.be.null;
expect(undefined).to.be.undefined;

NAN
expect(NaN).to.be.NaN;

.FAIL
.fail(actual, expected, [message], [operator])
should.fail();
should.fail("custom error message");
should.fail(1, 2);
should.fail(1, 2, "custom error message");
should.fail(1, 2, "custom error message", ">");
should.fail(1, 2, undefined, ">");


CHAI-SPIES

spy.on
const array = [1, 2, 3];

chai.spy.on(array, 'push');

// or multiple spies
chai.spy.on(array, ['push', 'pop']);


chai.spy.on(array, 'push', function (...items) {
  // custom implementation of `push` method
});


.spy
expect(spy).to.be.spy;
spy.should.be.spy;

.called
expect(spy).to.have.been.called();
spy.should.have.been.called();

.with
spy('foo');
expect(spy).to.have.been.called.with('foo');
spy.should.have.been.called.with('foo');

.nth(n).called.with
spy('foo');
spy('bar');
spy('baz');
spy('foobar');
expect(spy).to.have.been.first.called.with('foo');
spy.should.have.been.first.called.with('foo');
expect(spy).on.nth(5).be.called.with('foobar');
spy.should.on.nth(5).be.called.with('foobar');

spy('foo');
spy('bar');
expect(spy).to.have.been.third.called.with('baz');
spy.should.have.been.third.called.with('baz');

.once()
expect(spy).to.have.been.called.once;
expect(spy).to.not.have.been.called.once;
spy.should.have.been.called.once;
spy.should.not.have.been.called.once;

.twice
expect(spy).to.have.been.called.twice;
expect(spy).to.not.have.been.called.twice;
spy.should.have.been.called.twice;
spy.should.not.have.been.called.twice;

.exactly(n)
expect(spy).to.have.been.called.exactly(3);
expect(spy).to.not.have.been.called.exactly(3);
spy.should.have.been.called.exactly(3);
spy.should.not.have.been.called.exactly(3);

.min(n) / .at.least(n)
expect(spy).to.have.been.called.min(3);
expect(spy).to.not.have.been.called.at.least(3);
spy.should.have.been.called.at.least(3);
spy.should.not.have.been.called.min(3);

.max(n) / .at.most(n)
expect(spy).to.have.been.called.max(3);
expect(spy).to.not.have.been.called.at.most(3);
spy.should.have.been.called.at.most(3);
spy.should.not.have.been.called.max(3);

.above(n) / .gt(n)
expect(spy).to.have.been.called.above(3);
expect(spy).to.not.have.been.called.gt(3);
spy.should.have.been.called.gt(3);
spy.should.not.have.been.called.above(3);

.below(n) / .lt(n)
expect(spy).to.have.been.called.below(3);
expect(spy).to.not.have.been.called.lt(3);
spy.should.have.been.called.lt(3);
spy.should.not.have.been.called.below(3);


function ship(coordinates){
  const array = []
  array.push(coordinates)
}
ship([0,0])

UNFORTUNATELY, YOU CANT JUST EXPECT THE FIRST MEMBER TO BE [0,0] BECAUSE TWO UNIQUE ARRAYS ARE NEVER TRULY EQUAL IN JAVASCRIPT, EVEN THEY STORE THE SAME VALUES, EVERY ARRAY IS A DISTINCT OBJECT BUT JAVASCRIPT USES STRICT IDENTITY FOR EQUALS.

TWO ARRAY CAN ONLY BE EQUAL IF THEY WERE REALLY THE SAME OBJECT OR THEY SHARE THE SAME MEMORY


const array1 = [0,0]
const array2 = [0,0]

array1 === array2		// false

WE CALL ARRAYS THAT LOOKS THE SAME DEEPLY EQUAL
BECAUSE THEIR DEEP INTERNAL VALUES ARE EQUAL EVEN THOUGH THE ARRAYS THEMSELVES ARE DIFFERENT OBJECTS 
 